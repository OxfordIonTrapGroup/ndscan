"""Standalone tool to show ndscan plots from ARTIQ HDF5 results files."""

import asyncio
import argparse
from collections import OrderedDict
from dataclasses import dataclass
from datetime import datetime, timezone
import h5py
import os
import sys
from oitg import results
from sipyco import pyon
from qasync import QEventLoop, QtWidgets

from .plots.container_widgets import PlotAreaWidget, PlotAreaTabWidget
from .plots.model import Context
from .plots.model.hdf5 import HDF5Root
from .results.arguments import extract_param_schema, summarise
from .results.tools import find_ndscan_roots, get_source_id
from .utils import shorten_to_unambiguous_suffixes, strip_suffix


@dataclass
class ArtiqMetadata:
    rid: int
    start_time: float
    run_time: float
    artiq_version: str


def format_epoch_timestamp_as_utc(timestamp: float) -> str:
    dt = datetime.fromtimestamp(timestamp, timezone.utc)
    return dt.strftime("%Y-%m-%d %H:%M:%S %Z")


def print_metadata(m: ArtiqMetadata):
    print("Metadata")
    print("========")
    print()
    print(" - RID:", m.rid)
    print(" - Launched at:", format_epoch_timestamp_as_utc(m.start_time))
    print(" - Entered run() at:", format_epoch_timestamp_as_utc(m.run_time))
    print(" - ARTIQ version:", m.artiq_version)
    print()


def get_argparser():
    parser = argparse.ArgumentParser(
        description="Displays ndscan plot from ARTIQ HDF5 results file",
        epilog=(
            "Instead of a file name, just a run id or 'magic' source string can be "
            "supplied, which is then resolved using oitg.results (e.g. 'alice_12345', "
            "or just '12345' to infer the experiment name from the environment)."))
    parser.add_argument("--prefix",
                        default=None,
                        type=str,
                        help="Prefix of root in dataset tree (default: auto-detect)")
    parser.add_argument("path",
                        metavar="FILE",
                        type=str,
                        help="Path to HDF5 results file")
    return parser


def fetch_explicit_prefix(args):
    prefix = args.prefix
    if prefix and not prefix[-1] == ".":
        prefix += "."
    return prefix


def load_h5(args):
    """Find and load HDF5 file specified by `args`

    :param args: Arguments - see :func:`get_argparser`.
    :returns: The path of the HDF5 file, the H5 datasets object,
        a list of ndscan root prefixes, and the schema metadata
        of the scan.
    """
    magic_spec = results.parse_magic(args.path)
    if magic_spec is not None:
        paths = results.find_results(day="auto", **magic_spec)
        if len(paths) != 1:
            QtWidgets.QMessageBox.critical(None, "Unable to resolve experiment path",
                                           f"Could not resolve '{args.path}: {paths}'")
            sys.exit(1)
        path = next(iter(paths.values())).path
    else:
        path = args.path

    try:
        file = h5py.File(path, "r")
    except Exception as e:
        QtWidgets.QMessageBox.critical(None, "Unable to load file", str(e))
        sys.exit(1)

    try:
        datasets = file["datasets"]
    except KeyError:
        QtWidgets.QMessageBox.critical(
            None, "Not an ARTIQ results file",
            f"No ARTIQ dataset records found in file: '{args.path}'")
        sys.exit(1)

    prefix = fetch_explicit_prefix(args)
    if prefix is not None:
        try:
            # 'axes' existed since the earliest schema revisions, so we can use it to
            # detect whether the file/prefix the user specified vaguely looks like it
            # has been generated by ndscan.
            datasets[prefix + "axes"][()]
        except KeyError:
            QtWidgets.QMessageBox.critical(
                None, "Not an ndscan file",
                "Datasets '{}*' in file '{}' do not look like ndscan results.".format(
                    prefix, args.path))
            sys.exit(1)
        prefixes = [prefix]
    else:
        prefixes = find_ndscan_roots(datasets)
        if not prefixes:
            QtWidgets.QMessageBox.critical(
                None, "Not an ndscan file",
                f"No ndscan result datasets found in file: '{args.path}'")
            sys.exit(1)

    expid = pyon.decode(file["expid"][()])
    try:
        schema = extract_param_schema(expid["arguments"])
    except Exception as e:
        print("No ndscan parameter arguments found:", e)
        print()
        schema = None

    artiq_metadata = ArtiqMetadata(rid=file["rid"][()],
                                   start_time=file["start_time"][()],
                                   run_time=file["run_time"][()],
                                   artiq_version=file["artiq_version"][()].decode())

    return path, datasets, prefixes, schema, artiq_metadata


def main():
    args = get_argparser().parse_args()

    app = QtWidgets.QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    _, datasets, prefixes, schema, artiq_metadata = load_h5(args)

    if schema is not None:
        print(summarise(schema))

    print_metadata(artiq_metadata)

    try:
        context = Context()
        context.set_title(os.path.basename(args.path))
        context.set_source_id(get_source_id(datasets, prefixes))

        roots = [HDF5Root(datasets, p, context) for p in prefixes]
    except Exception as e:
        QtWidgets.QMessageBox.critical(None, "Error parsing ndscan file",
                                       f"Error parsing datasets in '{args.path}': {e}")
        sys.exit(2)

    if len(roots) == 1:
        widget = PlotAreaWidget(roots[0], context)
    else:
        label_map = shorten_to_unambiguous_suffixes(
            prefixes, lambda fqn, n: ".".join(fqn.split(".")[-(n + 1):]))
        widget = PlotAreaTabWidget(
            OrderedDict(zip((strip_suffix(label_map[p], ".") for p in prefixes),
                            roots)), context)
    widget.setWindowTitle(f"{context.get_title()} â€“ ndscan.show")
    widget.show()
    widget.resize(800, 600)
    sys.exit(app.exec())


if __name__ == '__main__':
    main()
